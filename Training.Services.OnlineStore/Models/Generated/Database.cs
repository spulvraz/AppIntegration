



















// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `onlineStoreDb`
//     Provider:               `System.Data.SqlServerCe.4.0`
//     Connection String:      `Data Source=C:\Dev\Moriyama\Training\Umbraco HQ 2016\src\Training.Mvc.OnlineStore.UI\App_Data\OnlineStore.sdf;Flush Interval=1;Password=0nl1neSt0re`
//     Schema:                 ``
//     Include Views:          `False`


using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace onlineStoreDb
{

	public partial class onlineStoreDbDB : Database
	{
		public onlineStoreDbDB() 
			: base("onlineStoreDb")
		{
			CommonConstruct();
		}

		public onlineStoreDbDB(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			onlineStoreDbDB GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static onlineStoreDbDB GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new onlineStoreDbDB();
        }

		[ThreadStatic] static onlineStoreDbDB _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        

		public class Record<T> where T:new()
		{
			public static onlineStoreDbDB repo { get { return onlineStoreDbDB.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }

			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }

			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }

		}

	}
	



    

	[TableName("Applications")]



	[PrimaryKey("ApplicationId", AutoIncrement=false)]

	[ExplicitColumns]
    public partial class Application : onlineStoreDbDB.Record<Application>  
    {



		[Column] public Guid ApplicationId { get; set; }





		[Column] public string ApplicationName { get; set; }





		[Column] public string Description { get; set; }



	}

    

	[TableName("Category")]



	[PrimaryKey("Id")]



	[ExplicitColumns]
    public partial class Category : onlineStoreDbDB.Record<Category>  
    {



		[Column] public int Id { get; set; }





		[Column] public string Name { get; set; }



	}

    

	[TableName("Memberships")]



	[PrimaryKey("UserId", AutoIncrement=false)]

	[ExplicitColumns]
    public partial class Membership : onlineStoreDbDB.Record<Membership>  
    {



		[Column] public Guid UserId { get; set; }





		[Column] public Guid ApplicationId { get; set; }





		[Column] public string Password { get; set; }





		[Column] public int PasswordFormat { get; set; }





		[Column] public string PasswordSalt { get; set; }





		[Column] public string Email { get; set; }





		[Column] public string PasswordQuestion { get; set; }





		[Column] public string PasswordAnswer { get; set; }





		[Column] public bool IsApproved { get; set; }





		[Column] public bool IsLockedOut { get; set; }





		[Column] public DateTime CreateDate { get; set; }





		[Column] public DateTime LastLoginDate { get; set; }





		[Column] public DateTime LastPasswordChangedDate { get; set; }





		[Column] public DateTime LastLockoutDate { get; set; }





		[Column] public int FailedPasswordAttemptCount { get; set; }





		[Column] public DateTime FailedPasswordAttemptWindowStart { get; set; }





		[Column] public int FailedPasswordAnswerAttemptCount { get; set; }





		[Column] public DateTime FailedPasswordAnswerAttemptWindowsStart { get; set; }





		[Column] public string Comment { get; set; }



	}

    

	[TableName("Product")]



	[PrimaryKey("Id")]



	[ExplicitColumns]
    public partial class Product : onlineStoreDbDB.Record<Product>  
    {



		[Column] public int Id { get; set; }





		[Column] public string Name { get; set; }





		[Column] public decimal Price { get; set; }





		[Column] public int Category { get; set; }





		[Column] public string Artist { get; set; }





		[Column] public string Description { get; set; }





		[Column] public bool HpFeatured { get; set; }





		[Column] public int Rates { get; set; }



	}

    

	[TableName("Profiles")]



	[PrimaryKey("UserId", AutoIncrement=false)]

	[ExplicitColumns]
    public partial class Profile : onlineStoreDbDB.Record<Profile>  
    {



		[Column] public Guid UserId { get; set; }





		[Column] public string PropertyNames { get; set; }





		[Column] public string PropertyValueStrings { get; set; }





		[Column] public byte[] PropertyValueBinary { get; set; }





		[Column] public DateTime LastUpdatedDate { get; set; }



	}

    

	[TableName("Roles")]



	[PrimaryKey("RoleId", AutoIncrement=false)]

	[ExplicitColumns]
    public partial class Role : onlineStoreDbDB.Record<Role>  
    {



		[Column] public Guid RoleId { get; set; }





		[Column] public Guid ApplicationId { get; set; }





		[Column] public string RoleName { get; set; }





		[Column] public string Description { get; set; }



	}

    

	[TableName("Users")]



	[PrimaryKey("UserId", AutoIncrement=false)]

	[ExplicitColumns]
    public partial class User : onlineStoreDbDB.Record<User>  
    {



		[Column] public Guid UserId { get; set; }





		[Column] public Guid ApplicationId { get; set; }





		[Column] public string UserName { get; set; }





		[Column] public bool IsAnonymous { get; set; }





		[Column] public DateTime LastActivityDate { get; set; }



	}

    

	[TableName("UsersInRoles")]



	[PrimaryKey("UserId", AutoIncrement=false)]

	[ExplicitColumns]
    public partial class UsersInRole : onlineStoreDbDB.Record<UsersInRole>  
    {



		[Column] public Guid UserId { get; set; }





		[Column] public Guid RoleId { get; set; }



	}


}


